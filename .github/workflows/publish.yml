name: Build and Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      publish_to:
        description: 'Where to publish'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - prod
        - none

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
        pip install -e .[dev,test]

    - name: Lint with flake8
      run: |
        flake8 ninjapy tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 ninjapy tests --count --exit-zero --max-complexity=15 --max-line-length=120 --statistics

    - name: Type check with mypy
      run: |
        mypy ninjapy

    - name: Test with pytest
      run: |
        pytest -v --cov=ninjapy --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: |
        twine check dist/*
        pip install dist/*.whl
        python -c "import ninjapy; print(f'Successfully imported ninjapy v{ninjapy.__version__}')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  publish-test:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to == 'test') ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'test-publish'))

    environment:
      name: testpypi
      url: https://test.pypi.org/project/ninjapy/

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        verbose: true

    - name: Test installation from TestPyPI
      run: |
        sleep 60  # Wait for package to be available
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ ninjapy
        python -c "import ninjapy; print(f'TestPyPI installation successful: v{ninjapy.__version__}')"

  publish-prod:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'release' && github.event.action == 'published') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to == 'prod') ||
      (startsWith(github.ref, 'refs/tags/v'))

    environment:
      name: pypi
      url: https://pypi.org/project/ninjapy/

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

    - name: Test installation from PyPI
      run: |
        sleep 120  # Wait for package to be available
        pip install ninjapy
        python -c "import ninjapy; print(f'PyPI installation successful: v{ninjapy.__version__}')"

  create-release:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog (you can customize this)
        echo "## What's Changed in v$VERSION" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Commits since $LAST_TAG:" >> RELEASE_NOTES.md
          git log --oneline $LAST_TAG..HEAD --pretty=format:"- %s" >> RELEASE_NOTES.md
        else
          echo "### Initial release" >> RELEASE_NOTES.md
        fi
        
        echo "" >> RELEASE_NOTES.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v$VERSION" >> RELEASE_NOTES.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release v${{ steps.changelog.outputs.version }}
        body_path: RELEASE_NOTES.md
        files: |
          dist/*
        draft: false
        prerelease: ${{ contains(steps.changelog.outputs.version, 'rc') || contains(steps.changelog.outputs.version, 'beta') || contains(steps.changelog.outputs.version, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 